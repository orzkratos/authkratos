// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: somestub.proto

package somestub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SomeStub_SelectSomething_FullMethodName = "/somestub.SomeStub/SelectSomething"
	SomeStub_CreateSomething_FullMethodName = "/somestub.SomeStub/CreateSomething"
	SomeStub_UpdateSomething_FullMethodName = "/somestub.SomeStub/UpdateSomething"
)

// SomeStubClient is the client API for SomeStub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SomeStub provides test endpoints for authentication middleware testing
// SomeStub 提供用于测试认证中间件的测试端点
type SomeStubClient interface {
	// SelectSomething - query operation, does not require authentication (public access)
	// Tests EXCLUDE mode where certain operations are explicitly excluded from auth
	// SelectSomething - 查询操作，不需要认证（公开访问）
	// 测试 EXCLUDE 模式，某些操作明确排除认证
	SelectSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// CreateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// CreateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	CreateSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// UpdateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// UpdateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	UpdateSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type someStubClient struct {
	cc grpc.ClientConnInterface
}

func NewSomeStubClient(cc grpc.ClientConnInterface) SomeStubClient {
	return &someStubClient{cc}
}

func (c *someStubClient) SelectSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, SomeStub_SelectSomething_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *someStubClient) CreateSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, SomeStub_CreateSomething_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *someStubClient) UpdateSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, SomeStub_UpdateSomething_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomeStubServer is the server API for SomeStub service.
// All implementations must embed UnimplementedSomeStubServer
// for forward compatibility.
//
// SomeStub provides test endpoints for authentication middleware testing
// SomeStub 提供用于测试认证中间件的测试端点
type SomeStubServer interface {
	// SelectSomething - query operation, does not require authentication (public access)
	// Tests EXCLUDE mode where certain operations are explicitly excluded from auth
	// SelectSomething - 查询操作，不需要认证（公开访问）
	// 测试 EXCLUDE 模式，某些操作明确排除认证
	SelectSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	// CreateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// CreateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	CreateSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	// UpdateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// UpdateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	UpdateSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedSomeStubServer()
}

// UnimplementedSomeStubServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSomeStubServer struct{}

func (UnimplementedSomeStubServer) SelectSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectSomething not implemented")
}
func (UnimplementedSomeStubServer) CreateSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSomething not implemented")
}
func (UnimplementedSomeStubServer) UpdateSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSomething not implemented")
}
func (UnimplementedSomeStubServer) mustEmbedUnimplementedSomeStubServer() {}
func (UnimplementedSomeStubServer) testEmbeddedByValue()                  {}

// UnsafeSomeStubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomeStubServer will
// result in compilation errors.
type UnsafeSomeStubServer interface {
	mustEmbedUnimplementedSomeStubServer()
}

func RegisterSomeStubServer(s grpc.ServiceRegistrar, srv SomeStubServer) {
	// If the following call pancis, it indicates UnimplementedSomeStubServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SomeStub_ServiceDesc, srv)
}

func _SomeStub_SelectSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeStubServer).SelectSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeStub_SelectSomething_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeStubServer).SelectSomething(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomeStub_CreateSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeStubServer).CreateSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeStub_CreateSomething_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeStubServer).CreateSomething(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SomeStub_UpdateSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeStubServer).UpdateSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SomeStub_UpdateSomething_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeStubServer).UpdateSomething(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// SomeStub_ServiceDesc is the grpc.ServiceDesc for SomeStub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomeStub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "somestub.SomeStub",
	HandlerType: (*SomeStubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectSomething",
			Handler:    _SomeStub_SelectSomething_Handler,
		},
		{
			MethodName: "CreateSomething",
			Handler:    _SomeStub_CreateSomething_Handler,
		},
		{
			MethodName: "UpdateSomething",
			Handler:    _SomeStub_UpdateSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "somestub.proto",
}
