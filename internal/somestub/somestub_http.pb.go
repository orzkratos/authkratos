// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v6.32.1
// source: somestub.proto

package somestub

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSomeStubCreateSomething = "/somestub.SomeStub/CreateSomething"
const OperationSomeStubSelectSomething = "/somestub.SomeStub/SelectSomething"
const OperationSomeStubUpdateSomething = "/somestub.SomeStub/UpdateSomething"

type SomeStubHTTPServer interface {
	// CreateSomething CreateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// CreateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	CreateSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	// SelectSomething SelectSomething - query operation, does not require authentication (public access)
	// Tests EXCLUDE mode where certain operations are explicitly excluded from auth
	// SelectSomething - 查询操作，不需要认证（公开访问）
	// 测试 EXCLUDE 模式，某些操作明确排除认证
	SelectSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	// UpdateSomething UpdateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// UpdateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	UpdateSomething(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
}

func RegisterSomeStubHTTPServer(s *http.Server, srv SomeStubHTTPServer) {
	r := s.Route("/")
	r.GET("/api/something/select", _SomeStub_SelectSomething0_HTTP_Handler(srv))
	r.POST("/api/something/create", _SomeStub_CreateSomething0_HTTP_Handler(srv))
	r.PUT("/api/something/update", _SomeStub_UpdateSomething0_HTTP_Handler(srv))
}

func _SomeStub_SelectSomething0_HTTP_Handler(srv SomeStubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in wrapperspb.StringValue
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSomeStubSelectSomething)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SelectSomething(ctx, req.(*wrapperspb.StringValue))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*wrapperspb.StringValue)
		return ctx.Result(200, reply)
	}
}

func _SomeStub_CreateSomething0_HTTP_Handler(srv SomeStubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in wrapperspb.StringValue
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSomeStubCreateSomething)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSomething(ctx, req.(*wrapperspb.StringValue))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*wrapperspb.StringValue)
		return ctx.Result(200, reply)
	}
}

func _SomeStub_UpdateSomething0_HTTP_Handler(srv SomeStubHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in wrapperspb.StringValue
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSomeStubUpdateSomething)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSomething(ctx, req.(*wrapperspb.StringValue))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*wrapperspb.StringValue)
		return ctx.Result(200, reply)
	}
}

type SomeStubHTTPClient interface {
	// CreateSomething CreateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// CreateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	CreateSomething(ctx context.Context, req *wrapperspb.StringValue, opts ...http.CallOption) (rsp *wrapperspb.StringValue, err error)
	// SelectSomething SelectSomething - query operation, does not require authentication (public access)
	// Tests EXCLUDE mode where certain operations are explicitly excluded from auth
	// SelectSomething - 查询操作，不需要认证（公开访问）
	// 测试 EXCLUDE 模式，某些操作明确排除认证
	SelectSomething(ctx context.Context, req *wrapperspb.StringValue, opts ...http.CallOption) (rsp *wrapperspb.StringValue, err error)
	// UpdateSomething UpdateSomething - write operation, requires authentication
	// Returns user info from context to verify context injection works
	// Tests INCLUDE mode where operations require authentication
	// UpdateSomething - 写操作，需要认证
	// 从 context 返回用户信息以验证上下文注入
	// 测试 INCLUDE 模式，操作需要认证
	UpdateSomething(ctx context.Context, req *wrapperspb.StringValue, opts ...http.CallOption) (rsp *wrapperspb.StringValue, err error)
}

type SomeStubHTTPClientImpl struct {
	cc *http.Client
}

func NewSomeStubHTTPClient(client *http.Client) SomeStubHTTPClient {
	return &SomeStubHTTPClientImpl{client}
}

// CreateSomething CreateSomething - write operation, requires authentication
// Returns user info from context to verify context injection works
// Tests INCLUDE mode where operations require authentication
// CreateSomething - 写操作，需要认证
// 从 context 返回用户信息以验证上下文注入
// 测试 INCLUDE 模式，操作需要认证
func (c *SomeStubHTTPClientImpl) CreateSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...http.CallOption) (*wrapperspb.StringValue, error) {
	var out wrapperspb.StringValue
	pattern := "/api/something/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSomeStubCreateSomething))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SelectSomething SelectSomething - query operation, does not require authentication (public access)
// Tests EXCLUDE mode where certain operations are explicitly excluded from auth
// SelectSomething - 查询操作，不需要认证（公开访问）
// 测试 EXCLUDE 模式，某些操作明确排除认证
func (c *SomeStubHTTPClientImpl) SelectSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...http.CallOption) (*wrapperspb.StringValue, error) {
	var out wrapperspb.StringValue
	pattern := "/api/something/select"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSomeStubSelectSomething))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateSomething UpdateSomething - write operation, requires authentication
// Returns user info from context to verify context injection works
// Tests INCLUDE mode where operations require authentication
// UpdateSomething - 写操作，需要认证
// 从 context 返回用户信息以验证上下文注入
// 测试 INCLUDE 模式，操作需要认证
func (c *SomeStubHTTPClientImpl) UpdateSomething(ctx context.Context, in *wrapperspb.StringValue, opts ...http.CallOption) (*wrapperspb.StringValue, error) {
	var out wrapperspb.StringValue
	pattern := "/api/something/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSomeStubUpdateSomething))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
